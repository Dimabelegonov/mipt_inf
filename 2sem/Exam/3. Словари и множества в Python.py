"""Множество (set) - встроенная структура данных языка Python, имеющая следующие свойства:

1. Множество -- это коллекция (содержит элементы).

2. Множество неупорядоченно.

Множество не записывает (не хранит) позиции или порядок добавления его элементов.
Таким образом, множество не имеет свойств последовательности (например, массива):
у элементов множества нет индексов, невозможно взять срез множества...
элементы множества уникальны

3. Элементы множества уникальны (не может содержать два одинаковых элемента).

4. Элементы множества - хешируемые объекты.

В Python множество set реализовано с использованием хеш-таблицы.
Это приводит к тому, что элементы множества должны быть неизменяемыми объектами.
Например, элементом множества может быть строка, число, tuple,
но не может быть list, set..."""

"""Операции с set:

A=set() / {el1,...} - создать пустое множества
A.add(1) - добавить элемент
A.remove(1) - удалить элемент
elem in A - проверка вхождения элемента 
A == B - сравнение 
A.issubset(B) / A <= B - проверка на нестрогое подмножество (< - строгое)
A.issuperset(B) / A >= B - проверка на нестрогое надмножество (> - строгое)
A.union(B,...) / A | B | ... - объединение множеств
A.intersection(B,...) / A & B & ...  - пересечение
A.difference(B,...) / A - B - ... - разность множеств
A.symmetric_difference(B,...) / A ^ B ^ ... - симметрическая разность

Кроме того, у операций, порождающих новые множества, существует inplace варианты. 
Для методов это те же названия, только с префиксом _update, а для соответствующих операторов 
добавляется знак равенства =. Ниже показан вариант для операции разности множеств

A.difference_update(B)
A -= B

В Python существует неизменяемая версия множества - frozenset. 
Этот тип объектов поддерживает все операции обычного множества set, 
за исключением тех, которые его меняют."""

"""Словарь (dictionary) в Python -- это ассоциативный массив.
Ассоциативный массив это структура данных, содержащая пары 
вида ключ:значение. Ключи в ассоциативном массиве уникальны.

В Python есть встроенный ассоциативный массив - dict. 
Его реализация основана на хеш-таблицах. Поэтому
ключом может быть только хешируемый объект
значением может быть любой объект"""

"""Операции с dict:

dict = dict() / {} - создать словарь.
dict[key] = elem - добавить элемент.
del dict[key] - удалить ключ. Если ключа нет - KeyError.
dict.setdefault(key, elem) - добавить элемент. Если не вписать elem, то будет None.
dict.get(key, arg) - получает элементы под соответсвующим ключем. Если ключа нет, то выведет arg.
dict.pop(key, arg) - удаляет ключ. Если ключа нет, то выведет arg.

Зачастую необходимо пройтись в цикле по ключам, значениям или парам ключ:значение, 
содержащиеся в словаре. Для этого существуют методы dict.keys(), dict.values(), dict.items(). 
Они возвращают специальные DictView объекты, которые можно использовать в циклах.

dict.keys() - возвращает key.
dict.values() - возвращает elem.
dict.items() -  возвращает пары key elem.

Если DictView объекты для значений или пар содержат неизменяемые объекты, 
тогда они тоже ведут себя подобно множествам. Это означает, что привычные для 
множеств операции пересечения, вхождения и другие также работают с DictView.

OrderedDict - словарь, в важен порядок ключей.

import collections
dict = collections.OrderedDict()"""
